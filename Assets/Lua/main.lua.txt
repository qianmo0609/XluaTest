hp = 100
isPlay = false
heroName = "Owen"

playerInfo = {
    id = 1001,
    name = "Owen",
    level = 100
} 

eventMsg = {
    eventId = 101,
    param = "aaaaaaaaaaa"
}

playerPosition = {
   x = 10,
   y = 0,
   z = 10
}

function playerPosition:add(x0,y0,z0)
       self.x = self.x + x0
       self.y = self.y + y0
       self.z = self.z + z0
end

function playerPosition:sub(x0,y0,z0)
       self.x = self.x - x0
       self.y = self.y - y0
       self.z = self.z - z0
end

Item = {
  10001,1002,content = 10000,20001,3300,
}

function test(a)
    print(a)
end

--[[
local newGameObj = CS.UnityEngine.GameObject("test")

--print(CS.Test.GameCfg.url)
--CS.Test.GameCfg.url = "zzzzzz"
--print(CS.Test.GameCfg.url)

--CS.Test.GameCfg.CalcValue()

local actorObj = CS.Test.Actor()

--actorObj:callAtk()
--actorObj:callWalk()
actorObj.callAtk(actorObj)
actorObj.callWalk(actorObj)

--actorObj:PrintActorInfo()

actorObj.id = 1001
actorObj.hp = 100
actorObj.name = "wukong"
actorObj.baseAtk = 500.6
actorObj.baseDef = 800

--actorObj:PrintActorInfo()
print(actorObj.id)
print(actorObj.hp)
print(actorObj.name)
print(actorObj.baseAtk)
print(actorObj.baseDef)
actorObj:PrintActorInfo()

]]--


--[[ 调用父类方法
local playerObj = CS.Test.Player()

playerObj.id = 1001
playerObj.hp = 100
playerObj.name = "wukong"
playerObj.baseAtk = 500.6
playerObj.baseDef = 800

playerObj:PrintActorInfo()
]]

--[[ref、out
local actorObj = CS.Test.Actor()
local c,d = actorObj:Test2(10,1)
print(c,d)
]]

--[[重载方法
local actorObj = CS.Test.Actor()
local c,d = actorObj:Test2(10,1)
print(c,d)
]]

--[[操作符
local player1 = CS.Test.Player()
player1.Atk = 100
local player2 = CS.Test.Player()
player2.Atk = 210
print((player1+player2))
]]

--[[扩展方法泛型
local c1 = CS.Test.Actor()
local c2 = CS.Test.Player()
local c3 = CS.Test.Monster()

c1.TestExtend()
c2.TestExtend()
c3.TestExtend()
]]

--[[参数默认值
local p = CS.Test.Player()
p:TestDefualtValue(2,"aaaaaaaa",false)
p:TestDefualtValue(2,"aaaaaaaa")
p:TestDefualtValue(2)
]]

--[[可变参数
local p = CS.Test.Player()
p:TestParam(10,"hp",false,{"ccc",1,2})
p:TestParam(10,"hp",false)
]]

--[[枚举
local m = CS.Test.Monster()
print(m:getMonsterType(2))
print(CS.MonsterType.__CastFrom(1))
]]

--[[获取类型
print(typeof(CS.Test.Monster))
]]

--[[C#复杂类型和table的自动转换
local m = CS.TestObj()
m:test({a=10,c="ccccccc"})
]]

--[[ Cast 类型强转
local m = CS.Test.Monster()
--m:PrintActorInfo()
cast(m, typeof(CS.Test.Monster))
--m:PrintActorInfo()
]]

local function testD(content)
   print("LUA TESTD...."..content)
end


--[[delegate (+,-)
local p = CS.Test.Player()

p.test2 = p.test2 + testD 
p.test2("add")
p.test2 = p.test2 - testD
p.test2("remove")
]]

--[[ event
local m = CS.Test.Monster()

m:testEvent('+', testD)
m:testEvent()
m:testCALL("add");

m:testCALL("remove")
m:testEvent('-', testD)
]]

--[[hotfix
xlua.hotfix(CS.TestHotFix, 'TestPrint', function(self)
    print('After HotFix')
end)
]]

local util = require 'util'

OnDestroy = function()
    --print("Lua onDestroy")
    --xlua.hotfix(CS.TestHotFix, 'TestPrint', nil)
    --xlua.hotfix(CS.TestHotFixClass, '.ctor', nil)
    --util.print_func_ref_by_csharp()
end

--
testAction = function(info)
    
end


--[[.ctor
xlua.hotfix(CS.TestHotFixClass, '.ctor' , function(self,p,c)
        print("Lua .ctor",p,c,d)
end)]]

--[[prop
xlua.hotfix(CS.TestHotFixClass, {  
    set_TestProperty = function(self, v)
        self.testProperty = v
        print('Lua set_TestProperty', v)
    end;
    get_TestProperty = function(self)
        print('Lua get_TestProperty')
        return self.testProperty
    end
})]]

--[[ []操作符
xlua.hotfix(CS.TestHotFixClass, {  
     get_Item = function(self, k)
         print('get_Item', k)
         return 1024
     end;
     set_Item = function(self, k, v)
         print('set_Item', k, v)
     end;
})]]

--[[事件
xlua.hotfix(CS.TestHotFixClass, {  
      ['.ctor'] = function(self)
            util.state(self, {evt = {}})
      end;
      add_myEvent = function(self, cb)
          print('add_Event', cb)
          table.insert(self.evt, cb)
      end;
      remove_myEvent = function(self, cb)
          print('remove_Event', cb)
          for i, v in ipairs(self.evt) do
             if v == cb then
                table.remove(self.evt, i)
             break
             end
         end
     end;
})
local csObj = CS.TestHotFixClass()

local myEvent = function()
     print("aaaaaaaaaa")
end
print(csObj.MyDelegate)
--csObj:myEvent('+',myEvent);
--csObj["&myEvent"]()
]]


--[[析构
xlua.hotfix(CS.TestHotFixClass,"Finalize", function(self)
     print('Finalize', self)
end)]]

--[[泛型
xlua.hotfix(CS.TestGeneric(CS.System.Int32),".ctor", function(self)
     print("LUA INT32")
end)

xlua.hotfix(CS.TestGeneric(CS.System.Single),".ctor", function(self)
     print("LUA FLAOTG4")
end)]]

--[[Unity协程
local gameobject = CS.UnityEngine.GameObject('CoroutineTest')
CS.UnityEngine.Object.DontDestroyOnLoad(gameobject)
local cs_coroutine_runner = gameobject:AddComponent(typeof(CS.HotFixCoroutine))


local times = 5
cs_coroutine_runner:StartCoroutine(util.cs_generator(function()
    while (times > 0) do
       print('coroutine aaaaa')
	   coroutine.yield(CS.UnityEngine.WaitForSeconds(1))
       times = times - 1
    end
end))]]


--[[HotFix Unity协程
xlua.hotfix(CS.HotFixCoroutine,{
        CoroutineStart = function(self)
            return util.cs_generator(function()
                while true do
                    coroutine.yield(CS.UnityEngine.WaitForSeconds(3))
                    print('Wait for 3 seconds')
                end
            end)
        end;
})]]

--[[其他操作符
xlua.hotfix(CS.HotFixOtherOperator,"op_Addition",function(a,b)
         print("Lua Op_add")
         return 0
    end)

local ho1 = CS.HotFixOtherOperator()
local ho2 = CS.HotFixOtherOperator()
local a = ho1 + ho2
]]

--[[InKey
local a = function(self)
       print("Lua EventCall2")
end

--CS.XLua.HotfixDelegateBridge.Set(4, a)

--local tik = CS.TestHotFixInkey()
--tik:test()

util.auto_id_map()
xlua.hotfix(CS.TestHotFixInkey, 'test', a)

local tik = CS.TestHotFixInkey()
tik:test()
]]

